# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o5jCMhY-T6IBWPpQ-tMw9VhUVgzHBriC
"""

//1
package main

import "fmt"

func main() {
	var (
	    matricula, presenca int
        trabalhoFinal float64
        prova [8]float64
        lista [5]float64
	)


	for {
		fmt.Scan(&matricula, &prova[0], &prova[1], &prova[2], &prova[3], &prova[4], &prova[5], &prova[6], &prova[7], &lista[0], &lista[1], &lista[2], &lista[3], &lista[4], &trabalhoFinal, &presenca)

		if matricula == -1 && prova[0] == -1 && prova[1] == -1 && prova[2] == -1 && prova[3] == -1 && prova[4] == -1 && prova[5] == -1 && prova[6] == -1 && prova[7] == -1 && lista[0] == -1 && lista[1] == -1 && lista[2] == -1 && lista[3] == -1 && lista[4] == -1 && trabalhoFinal == -1 && presenca == -1 {
			break
		}

		mediaProva := (prova[0] + prova[1] + prova[2] + prova[3] + prova[4] + prova[5] + prova[6] + prova[7]) / 8
		mediaLista := (lista[0] + lista[1] + lista[2] + lista[3] + lista[4]) / 5
		notaFinal := 0.7*mediaProva + 0.15*mediaLista + 0.15*trabalhoFinal

		if notaFinal >= 6 && presenca > 96 {
			fmt.Println("maticula: ",matricula,",", "nota final: ",notaFinal,","," Situacao Final: ","Aprovado")
		} else if notaFinal < 6 && presenca >= 96 {
			fmt.Println("maticula: ",matricula,","," nota final: ",notaFinal,","," Situacao Final: ","Reprovado por nota")
		} else if notaFinal >= 6 && presenca < 96 {
			fmt.Println("maticula: ",matricula,","," nota final: ",notaFinal,","," Situacao Final: ","Reprovado por frequência insuficiente")
		} else {
			fmt.Println("maticula: ",matricula,","," nota final: ",notaFinal,","," Situacao Final: ","Reprovado por frequência e por nota")
		}
	}
}

//2
package main

import "fmt"

func main() {
    var popA, popB int
    fmt.Scan(&popA, &popB)

    anos := 0
    taxaA := 0.03
    taxaB := 0.015

    for popA < popB {
       popA = popA + int(float64(popA) * taxaA)
       popB = popB + int(float64(popB) * taxaB)
       anos = anos + 1

    }

    fmt.Printf("ANOS = %d\n", anos)
}

//3
package main

import"fmt"

func fatorial(a int)int{
    if a==0{
        return 1
    }
    resultado:=1
    for i:=1; i<=a; i++{
        resultado*=i
    }
    return resultado
}
    func main() {
    var n int
    fmt.Scan(&n)

    fmt.Printf("%d! = %d\n", n, fatorial(n))
}

//4
package main

import "fmt"

func main() {
	var numero, inicio, quantidade, incremento float64

	fmt.Println("Digite um número:")
	fmt.Scan(&numero)

	fmt.Println("Digite o valor inicial:")
	fmt.Scan(&inicio)

	fmt.Println("Digite a quantidade de números:")
	fmt.Scan(&quantidade)

	fmt.Println("Digite o incremento:")
	fmt.Scan(&incremento)

	fmt.Println("Tabuada de soma:")
	for i := 0.0; i < quantidade; i++ {
		fmt.Printf("%.2f + %.2f = %.2f\n", numero, inicio+(i*incremento), numero+(inicio+(i*incremento)))
	}

	fmt.Println("Tabuada de subtração:")
	for i := 0.0; i < quantidade; i++ {
		fmt.Printf("%.2f - %.2f = %.2f\n", numero, inicio+(i*incremento), numero-(inicio+(i*incremento)))
	}

	fmt.Println("Tabuada de multiplicação:")
	for i := 0.0; i < quantidade; i++ {
		fmt.Printf("%.2f * %.2f = %.2f\n", numero, inicio+(i*incremento), numero*(inicio+(i*incremento)))
	}

	fmt.Println("Tabuada de divisão:")
	for i := 0.0; i < quantidade; i++ {
		divisor := inicio + (i * incremento)
		if divisor != 0 {
			fmt.Printf("%.2f / %.2f = %.2f\n", numero, divisor, numero/divisor)
		} else {
			fmt.Printf("%.2f / %.2f = Indefinido (divisão por zero)\n", numero, divisor)
		}
	}
}

//5
package main

import "fmt"

func main() {
	var n, anterior, atual, max int

	fmt.Println("Quantos números você quer digitar?")
	fmt.Scan(&n)

	max = 1

	fmt.Println("Digite os números:")
	for i := 0; i < n; i++ {
		fmt.Scan(&atual)
		if atual > anterior {
			max++
		} else {
			max = 1
		}
		anterior = atual
	}

	fmt.Println("O maior comprimento de uma sequência crescente é:", max)
}

//6
package main

import "fmt"

func main() {
	var n int
	fmt.Println("Digite quantos números você quer digitar:")
	fmt.Scan(&n)

	numeros := make([]int, n)

	fmt.Println("Digite os números:")
	for i := 0; i < n; i++ {
		fmt.Scan(&numeros[i])
	}

	maiorSequencia := 1

	for i := 0; i < n-1; i++ {
		contador := 1
		for numeros[i] == numeros[i+1] {
			contador++
			i++
			if i == n-1 {
				break
			}
		}
		if contador > maiorSequencia {
			maiorSequencia = contador
		}
	}

	fmt.Printf("A maior sequência de números iguais tem tamanho %d.\n", maiorSequencia)
}

//7
package main

import (
	"fmt"
)

func main() {
	var numero, contadorPar, contadorImpar, somaPar, somaImpar float64

	for {
		fmt.Println("Digite um número inteiro (digite 0 para encerrar):")
		fmt.Scan(&numero)

		if numero == 0 {
			break
		}

		if numero%2 == 0 {
			contadorPar++
			somaPar += numero
		} else {
			contadorImpar++
			somaImpar += numero
		}
	}

	if contadorPar > 0 {
		mediaPar := somaPar / contadorPar
		fmt.Printf("MEDIA PAR = %.2f\n", mediaPar)
	} else {
		fmt.Println("Não foram digitados números pares.")
	}

	if contadorImpar > 0 {
		mediaImpar := somaImpar / contadorImpar
		fmt.Printf("MEDIA IMPAR = %.2f\n", mediaImpar)
	} else {
		fmt.Println("Não foram digitados números ímpares.")
	}
}

//8
package main

import "fmt"

func main() {
	var numTimes int

	fmt.Println("Quantos times participam do campeonato?")
	fmt.Scan(&numTimes)

	if numTimes < 2 {
		fmt.Println("O campeonato precisa ter pelo menos dois times para ocorrer.")
		return
	}

	fmt.Println("Finais possíveis:")
	for i := 1; i < numTimes; i++ {
		for j := i + 1; j <= numTimes; j++ {
			fmt.Printf("Final: Time %d X Time %d\n", i, j)
		}
	}
}

//9
package main

import "fmt"

func main() {
    var numero int
    fmt.Println("Digite um número inteiro positivo:")
    fmt.Scanln(&numero)

    if numero <= 1 {
        fmt.Println("Número inválido ou menor ou igual a 1!")
        return
    }

    primo := true
    for divisor := 2; divisor*divisor <= numero; divisor++ {
        if numero%divisor == 0 {
            primo = false
            break
        }
    }

    if primo {
        fmt.Println("PRIMO")
    } else {
        fmt.Println("NÃO PRIMO")
    }
}

//10
package main

import "fmt"

func main() {
	var matricula int
	var horasTrabalhadas, valorHora, salario float64

	for {
		fmt.Println("Digite a matrícula do funcionário:")
		fmt.Scan(&matricula)

		if matricula == 0 {

			break
		}

		fmt.Println("Digite as horas trabalhadas e o valor da hora separados por espaço:")
		fmt.Scan(&horasTrabalhadas, &valorHora)

		salario = horasTrabalhadas * valorHora
		fmt.Printf("O funcionário de matrícula %d tem um salário de R$ %.2f\n", matricula, salario)
	}
}

package main

import (
    "fmt"
    "math"
)

func main() {
    var numero, erro float64

    fmt.Println("Digite o número para calcular a raiz quadrada:")
    fmt.Scan(&numero)

    fmt.Println("Digite o erro desejado:")
    fmt.Scan(&erro)

    aproximacao := numero / 2
    iteracao := 0

    for {
        aproximacao = (aproximacao + numero/aproximacao) / 2
        iteracao++

        erroAtual := math.Abs(numero - aproximacao*aproximacao)

        fmt.Printf("Iteração %d: %.9f, Erro: %.9f\n", iteracao, aproximacao, erroAtual)

        if erroAtual <= erro {
            break
        }
    }
}

//12
package main

import "fmt"

func main() {
	var valorIngresso, valorInicial, valorFinal float64

	fmt.Println("Digite o valor do ingresso:")
	fmt.Scan(&valorIngresso)

	fmt.Println("Digite o valor inicial do intervalo:")
	fmt.Scan(&valorInicial)

	fmt.Println("Digite o valor final do intervalo:")
	fmt.Scan(&valorFinal)

	if valorInicial >= valorFinal {
		fmt.Println("O intervalo é inválido.")
		return
	}

	melhorValor, lucroMaximo, ingressosVendidosMaximo := valorInicial, 0.0, 0

	for valor := valorInicial; valor <= valorFinal; valor++ {
		ingressosVendidos := 120
		if valor < valorIngresso {
			ingressosVendidos += 25
		} else if valor > valorIngresso {
			ingressosVendidos -= 30
		}

		lucro := (valor * float64(ingressosVendidos)) - (200.0 + 0.05*float64(ingressosVendidos))

		if lucro > lucroMaximo {
			melhorValor, lucroMaximo, ingressosVendidosMaximo = valor, lucro, ingressosVendidos
		}
	}

	fmt.Printf("Melhor valor final: %.2f\n", melhorValor)
	fmt.Printf("Lucro máximo: %.2f\n", lucroMaximo)
	fmt.Printf("Número de ingressos: %d\n", ingressosVendidosMaximo)
}

//13
package main

import "fmt"

func main() {
    var n int
    fmt.Println("Digite o número de grãos para o primeiro quadro:")
    fmt.Scan(&n)

    totalGrãos := calcularTotalGrãos(n)

    fmt.Printf("Total de grãos no tabuleiro: %d\n", totalGrãos)
}

func calcularTotalGrãos(n int) int {
    total := 0
    grãos := n

    for i := 0; i < 64; i++ {
        total += grãos
        if i%2 == 0 {
            grãos *= 2 // Dobro de grãos para quadros escuros
        }
    }

    return total
}

//14
package main

import "fmt"

func main() {
	var linhas, colunas int

	fmt.Println("Digite o número de linhas da matriz:")
	fmt.Scan(&linhas)

	fmt.Println("Digite o número de colunas da matriz:")
	fmt.Scan(&colunas)

	fmt.Println("Pares de índices abaixo da diagonal principal:")
	for linha := 0; linha < linhas; linha++ {
		for coluna := 0; coluna < colunas && coluna < linha; coluna++ {
			fmt.Printf("(%d,%d) ", linha, coluna)
		}
		fmt.Println()
	}
}

//15
package main

import "fmt"

func inverterNumero(num int) int {
	return (num%10)*100 + ((num/10)%10)*10 + num/100
}

func main() {
	var T int
	fmt.Scan(&T)

	for i := 0; i < T; i++ {
		var A, B int
		fmt.Scan(&A, &B)

		A = inverterNumero(A)
		B = inverterNumero(B)

		if A > B {
			fmt.Println(A)
		} else {
			fmt.Println(B)
		}
	}
}

//19
package main

import "fmt"

func main() {
	var m int
	fmt.Println("Digite um número inteiro maior que zero:")
	fmt.Scan(&m)

	for n := 1; n <= m; n++ {
		fmt.Printf("%d * %d * %d = ", n, n, n)

		soma := 0
		primeiroImpar := n*n - n + 1

		for i := 0; i < n; i++ {
			numeroImpar := primeiroImpar + 2*i
			fmt.Print(numeroImpar)
			soma += numeroImpar
			if i < n-1 {
				fmt.Print(" + ")
			}
		}

		fmt.Printf(" = %d\n", soma)
	}
}

//20
package main

import "fmt"

func main() {
    var n, soma int
    fmt.Println("Digite um número inteiro:")
    fmt.Scan(&n)

    fmt.Printf("%d = ", n)

    for i := 1; i < n; i++ {
        if n%i == 0 {
            soma += i
            fmt.Printf("%d", i)
            if soma != n {
                fmt.Print(" + ")
            }
        }
    }

    if soma == n {
        fmt.Printf(" = %d (NUMERO PERFEITO)\n", soma)
    } else {
        fmt.Printf(" = %d (NUMERO NAO E PERFEITO)\n", soma)
    }
}